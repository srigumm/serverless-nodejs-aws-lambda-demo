service: ecupcakes-sls-nodejs-aws-demo
provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  memorySize: 2048
  timeout: 15
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - lambda:InvokeFunction
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
  usagePlan:
    throttle:
      burstLimit: 500
      rateLimit: 1000
  tracing:
    apiGateway: true
    lambda: true

functions:
  create:
    handler: orders/create.create
    events:
      - http:
          path: api/v1/ecupcakes/order
          method: post
          cors: true

  list:
    handler: orders/list.list
    events:
      - http:
          path: api/v1/ecupcakes/order
          method: get
          cors: true

resources:
 Resources:
   UserOrders:
     Type: AWS::DynamoDB::Table
     DeletionPolicy: Retain # Keeps around the DynamoDB resource when we redeploy/destroy
     Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

